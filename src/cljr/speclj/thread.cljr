(ns speclj.thread)

(def pool (atom #{}))
(defn join [thread] (.Join thread))
(defn start [thread] (.Start thread))
(defn interrupt [thread] (.Interrupt thread))
(defn alive? [thread] (.-IsAlive thread))
(defn sleep [millis] (System.Threading.Thread/Sleep millis))
(defn join-all []
  (doseq [thread @pool]
    (join thread)
    (swap! pool disj thread)))

(defmacro create [& body]
  `(System.Threading.Thread.
     (gen-delegate System.Threading.ThreadStart [] ~@body)))

(defmacro spawn [& body]
  `(let [thread# (create ~@body)]
     (swap! pool conj thread#)
     (start thread#)
     thread#))
